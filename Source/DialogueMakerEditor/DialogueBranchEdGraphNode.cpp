#include "DialogueBranchEdGraphNode.h"

#include "DialogueMaker/DialogueBranchNodeInfoBase.h"
#define LOCTEXT_NAMESPACE "DialogueGraphEditor"

FText UDialogueBranchEdGraphNode::GetNodeTitle(ENodeTitleType::Type TitleType) const
{
	return FText::FromString("Branch");
}

FText UDialogueBranchEdGraphNode::GetTooltipText() const
{
	return FText::FromString("Branch Statement\nIf Condition is true, execution goes to True, otherwise it goes to False");
}

FLinearColor UDialogueBranchEdGraphNode::GetNodeTitleColor() const
{
	return Super::GetNodeTitleColor();
}

void UDialogueBranchEdGraphNode::AllocateDefaultPins()
{
	// 입력핀, 서로 다른 대화로부터 해당 대화로 이어질  수 있음
	CreatePin(EGPD_Input, TEXT("MultipleNodes"), FName(), TEXT("In"));
	
	UEdGraphPin* ConditionPin = CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Boolean, UEdGraphSchema_K2::PN_Condition);
	ConditionPin->AutogeneratedDefaultValue = TEXT("true");
	
	UEdGraphPin* TruePin = CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, UEdGraphSchema_K2::PN_Then);
	TruePin->PinFriendlyName = LOCTEXT("true", "true");

	UEdGraphPin* FalsePin = CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, UEdGraphSchema_K2::PN_Else);
	FalsePin->PinFriendlyName = LOCTEXT("false", "false");
}

FSlateIcon UDialogueBranchEdGraphNode::GetIconAndTint(FLinearColor& OutColor) const
{
	static FSlateIcon Icon(FAppStyle::GetAppStyleSetName(), "GraphEditor.Branch_16x");
	return Icon;
}

UEdGraphPin* UDialogueBranchEdGraphNode::CreateCustomPin(EEdGraphPinDirection Direction, FName Name)
{
	// TODO input Dialogue pin과 Boolean condition input구분 필요
	FName Category = (Direction == EGPD_Input) ? UEdGraphSchema_K2::PC_Boolean : TEXT("Outputs");
	FName SubCategory = TEXT("DialoguePin");

	UEdGraphPin* Pin = CreatePin(Direction, Category, Name);
	Pin->PinType.PinSubCategory = SubCategory;

	return Pin;
}

UEdGraphPin* UDialogueBranchEdGraphNode::CreateDefaultInputPin()
{
	return CreateCustomPin(EGPD_Input, FName(TEXT("Condition")));
}

void UDialogueBranchEdGraphNode::CreateDefaultOutputPin()
{
	CreateCustomPin(EGPD_Output, FName(TEXT("True")));
	CreateCustomPin(EGPD_Output, FName(TEXT("False")));
}

void UDialogueBranchEdGraphNode::GetNodeContextMenuActions(UToolMenu* Menu, UGraphNodeContextMenuContext* Context) const
{
	FToolMenuSection& Section = Menu->AddSection(TEXT("Section Name"), FText::FromString(TEXT("Dialogue Node Actions")));
	UDialogueBranchEdGraphNode* Node = (UDialogueBranchEdGraphNode*)this;

	Section.AddMenuEntry(
		TEXT("Delete Entry"),
		FText::FromString(TEXT("Delete Node")),
		FText::FromString(TEXT("Delete the node")),
		FSlateIcon(FAppStyle::GetAppStyleSetName(), "GraphEditor.Branch_16x"),
		FUIAction(FExecuteAction::CreateLambda(
			[Node] (){
				Node->GetGraph()->RemoveNode(Node);

	}
	))
	);
}

void UDialogueBranchEdGraphNode::InitNodeInfo(UObject* Outer)
{
	DialogueBranchNodeInfo = NewObject<UDialogueBranchNodeInfoBase>(Outer);
}

void UDialogueBranchEdGraphNode::SetDialogueNodeInfo(UDialogueNodeInfoBase* NewDialogueNodeInfo)
{
	DialogueBranchNodeInfo = Cast<UDialogueBranchNodeInfoBase>(NewDialogueNodeInfo);
}

UDialogueBranchNodeInfoBase* UDialogueBranchEdGraphNode::GetDialogueBranchNodeInfo() const
{
	return DialogueBranchNodeInfo;
}

UDialogueNodeInfoBase* UDialogueBranchEdGraphNode::GetNodeInfo() const
{
	return DialogueBranchNodeInfo;
}

EDialogueType UDialogueBranchEdGraphNode::GetDialogueNodeType() const
{
	return EDialogueType::BranchNode;
}
